from argparse import ArgumentParser
from utils import logger, parse_input
from typing import Iterator


def parse_line(line: str):
    return line.split()


class {{class}}:

    def __init__(self, {{doc_name}}: Iterator[str], part: int = 1):
        self.part = part

        self.{{element}}s = (parse_line(line) for line in {{doc_name}})

    def __str__(self):
        return f"{self.__class__.__name__}(part {self.part})"


def {{p2_function}}({{obj}}: {{class}}) -> int:
    accumulator = 0

    # solve part 2

    return accumulator


def {{p1_function}}({{obj}}: {{class}}) -> int:
    accumulator = 0

    # solve part 1

    return accumulator


arg_parser = ArgumentParser('python -m {{year}}.{{day}}.main', description="Advent of Code {{ year }} Day {{ day }}")
arg_parser.add_argument('input_path', help="Path to the input file")
arg_parser.add_argument('part', type=int, default=1, help="Which part of the challenge to apply.")

if __name__ == '__main__':
    argus = arg_parser.parse_args()

    {{doc_name}} = parse_input(argus.input_path)
    {{obj}} = {{class}}({{doc_name}})
    if argus.part == 1:
        answer = {{p1_function}}({{obj}})
    else:
        answer = {{p2_function}}({{obj}})

    logger.debug('')

    print(f"answer:\n{answer}")
